/**
 * Catchup APIs
 * The Catchup API document is intended strictly for internal use only.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { CUAuth } from '../model/cUAuth';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse400 } from '../model/inlineResponse400';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { environment } from '@env/environment';

@Injectable()
export class AuthService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * To generate an auth token.
   * This API generated the auth token based on client ID, client Secret, user id and app key shared.
   * @param body user object that needs to be shared to generate the token.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public authTokenPost(body: CUAuth, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
  public authTokenPost(
    body: CUAuth,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse200>>;
  public authTokenPost(
    body: CUAuth,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse200>>;
  public authTokenPost(body: CUAuth, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling authTokenPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (basicAuth) required
    //  if (this.configuration.username || this.configuration.password) {
    headers = headers.set('Authorization', 'Bearer ' + 'Y2F0Y2hfdXBfaW9zX2RldjpjQFRjSF91UF9pMDVfZDNW');
    //}

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }
    this.basePath = environment.BASE_URL;
    return this.httpClient.post<InlineResponse200>(`${this.basePath}/auth/token`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
