/**
 * Catchup APIs
 * The Catchup API document is intended strictly for internal use only.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ActivityLogResponse } from '../model/activityLogResponse';
import { DeliveredMessageInfoResponse } from '../model/deliveredMessageInfoResponse';
import { InlineResponse400 } from '../model/inlineResponse400';
import { OtherMessageInfoResponse } from '../model/otherMessageInfoResponse';
import { ReadMessageInfoResponse } from '../model/readMessageInfoResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class ChatService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.configuration.apiKeys['Authorization'] = localStorage.getItem('jwt-token');
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * To get the activities of the user
   * This API gives the activity logs of the user
   * @param previous_index The previous_index for which the information has to be fetched.
   * @param max_limit The max_limit for which the information has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public chatActivityLogPreviousIndexMaxLimitGet(
    previous_index: number,
    max_limit: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ActivityLogResponse>;
  public chatActivityLogPreviousIndexMaxLimitGet(
    previous_index: number,
    max_limit: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ActivityLogResponse>>;
  public chatActivityLogPreviousIndexMaxLimitGet(
    previous_index: number,
    max_limit: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ActivityLogResponse>>;
  public chatActivityLogPreviousIndexMaxLimitGet(
    previous_index: number,
    max_limit: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (previous_index === null || previous_index === undefined) {
      throw new Error(
        'Required parameter previous_index was null or undefined when calling chatActivityLogPreviousIndexMaxLimitGet.'
      );
    }

    if (max_limit === null || max_limit === undefined) {
      throw new Error(
        'Required parameter max_limit was null or undefined when calling chatActivityLogPreviousIndexMaxLimitGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<ActivityLogResponse>(
      `${this.basePath}/chat/activity/log/${encodeURIComponent(String(previous_index))}/${encodeURIComponent(
        String(max_limit)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * To get the message status and information
   * This API gives the delivery status of a message based on the message_id supplied.
   * @param message_id The message_id for which the information has to be fetched.
   * @param previous_index The previous_index for which the information has to be fetched.
   * @param max_limit The max_limit for which the information has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DeliveredMessageInfoResponse>;
  public chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DeliveredMessageInfoResponse>>;
  public chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DeliveredMessageInfoResponse>>;
  public chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (message_id === null || message_id === undefined) {
      throw new Error(
        'Required parameter message_id was null or undefined when calling chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet.'
      );
    }

    if (previous_index === null || previous_index === undefined) {
      throw new Error(
        'Required parameter previous_index was null or undefined when calling chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet.'
      );
    }

    if (max_limit === null || max_limit === undefined) {
      throw new Error(
        'Required parameter max_limit was null or undefined when calling chatInfoMessageIdDeliveredPreviousIndexMaxLimitGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<DeliveredMessageInfoResponse>(
      `${this.basePath}/chat/info/${encodeURIComponent(String(message_id))}/delivered/${encodeURIComponent(
        String(previous_index)
      )}/${encodeURIComponent(String(max_limit))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * To get the message status and information
   * This API gives the undelivered status of a message based on the message_id supplied.
   * @param message_id The message_id for which the information has to be fetched.
   * @param previous_index The previous_index for which the information has to be fetched.
   * @param max_limit The max_limit for which the information has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public chatInfoMessageIdOthersPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OtherMessageInfoResponse>;
  public chatInfoMessageIdOthersPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OtherMessageInfoResponse>>;
  public chatInfoMessageIdOthersPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OtherMessageInfoResponse>>;
  public chatInfoMessageIdOthersPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (message_id === null || message_id === undefined) {
      throw new Error(
        'Required parameter message_id was null or undefined when calling chatInfoMessageIdOthersPreviousIndexMaxLimitGet.'
      );
    }

    if (previous_index === null || previous_index === undefined) {
      throw new Error(
        'Required parameter previous_index was null or undefined when calling chatInfoMessageIdOthersPreviousIndexMaxLimitGet.'
      );
    }

    if (max_limit === null || max_limit === undefined) {
      throw new Error(
        'Required parameter max_limit was null or undefined when calling chatInfoMessageIdOthersPreviousIndexMaxLimitGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<OtherMessageInfoResponse>(
      `${this.basePath}/chat/info/${encodeURIComponent(String(message_id))}/others/${encodeURIComponent(
        String(previous_index)
      )}/${encodeURIComponent(String(max_limit))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * To get the read message status and information
   * This API gives the read status of a message based on the message_id supplied.
   * @param message_id The message_id for which the information has to be fetched.
   * @param previous_index The previous_index for which the information has to be fetched.
   * @param max_limit The max_limit for which the information has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public chatInfoMessageIdReadPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ReadMessageInfoResponse>;
  public chatInfoMessageIdReadPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ReadMessageInfoResponse>>;
  public chatInfoMessageIdReadPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ReadMessageInfoResponse>>;
  public chatInfoMessageIdReadPreviousIndexMaxLimitGet(
    message_id: number,
    previous_index: number,
    max_limit: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (message_id === null || message_id === undefined) {
      throw new Error(
        'Required parameter message_id was null or undefined when calling chatInfoMessageIdReadPreviousIndexMaxLimitGet.'
      );
    }

    if (previous_index === null || previous_index === undefined) {
      throw new Error(
        'Required parameter previous_index was null or undefined when calling chatInfoMessageIdReadPreviousIndexMaxLimitGet.'
      );
    }

    if (max_limit === null || max_limit === undefined) {
      throw new Error(
        'Required parameter max_limit was null or undefined when calling chatInfoMessageIdReadPreviousIndexMaxLimitGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<ReadMessageInfoResponse>(
      `${this.basePath}/chat/info/${encodeURIComponent(String(message_id))}/read/${encodeURIComponent(
        String(previous_index)
      )}/${encodeURIComponent(String(max_limit))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
