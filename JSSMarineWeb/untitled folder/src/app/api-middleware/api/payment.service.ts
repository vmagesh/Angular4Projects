/**
 * Catchup APIs
 * The Catchup API document is intended strictly for internal use only.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { InlineResponse20010 } from '../model/inlineResponse20010';
import { LocationInfoResponse } from '../model/locationInfoResponse';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import { SubscriptionResponse } from '../model/subscriptionResponse';

@Injectable()
export class PaymentService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.configuration.apiKeys['Authorization'] = localStorage.getItem('jwt-token');
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * To delete a subscription
   * This API cancels the subscription of a customer with the shared subscription_id
   * @param subscription_id The subscription_id which has to be cancelled.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public subscriptionDelete(
    subscription_id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20010>;
  public subscriptionDelete(
    subscription_id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20010>>;
  public subscriptionDelete(
    subscription_id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20010>>;
  public subscriptionDelete(
    subscription_id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (subscription_id === null || subscription_id === undefined) {
      throw new Error('Required parameter code was null or undefined when calling subscriptionDelete.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<InlineResponse20010>(
      `${this.basePath}/v1/payment/subscription/${encodeURIComponent(String(subscription_id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * To get the subscriptions information
   * This API fetches the list of subscriptions based on the token
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public subscriptionsGet(observe?: 'body', reportProgress?: boolean): Observable<LocationInfoResponse>;
  public subscriptionsGet(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LocationInfoResponse>>;
  public subscriptionsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationInfoResponse>>;
  public subscriptionsGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<SubscriptionResponse>(`${this.basePath}/v1/payment/subscription/list`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
  /**
   * To get the subscriptions information
   * This API fetches the list of subscriptions based on the token
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public invoiceListGet(
    subscription_id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LocationInfoResponse>;
  public invoiceListGet(
    subscription_id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LocationInfoResponse>>;
  public invoiceListGet(
    subscription_id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LocationInfoResponse>>;
  public invoiceListGet(
    subscription_id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<SubscriptionResponse>(
      `${this.basePath}/v1/payment/invoice/list/${encodeURIComponent(String(subscription_id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
  /**
   * To get the subscriptions information
   * This API fetches the list of subscriptions based on the token
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public invoiceDetailGet(
    invoice_id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LocationInfoResponse>;
  public invoiceDetailGet(
    invoice_id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LocationInfoResponse>>;
  public invoiceDetailGet(
    invoice_id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LocationInfoResponse>>;
  public invoiceDetailGet(invoice_id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<SubscriptionResponse>(
      `${this.basePath}/v1/payment/invoice/${encodeURIComponent(String(invoice_id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
