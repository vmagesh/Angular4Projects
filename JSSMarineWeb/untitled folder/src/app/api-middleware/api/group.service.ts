/**
 * Catchup APIs
 * The Catchup API document is intended strictly for internal use only.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { AddGroupParticipants } from '../model/addGroupParticipants';
import { CreateGroup } from '../model/createGroup';
import { CreateGroupResponse } from '../model/createGroupResponse';
import { EditGroup } from '../model/editGroup';
import { GroupInfoResponse } from '../model/groupInfoResponse';
import { InlineResponse20010 } from '../model/inlineResponse20010';
import { InlineResponse400 } from '../model/inlineResponse400';
import { RemoveGroupParticipants } from '../model/removeGroupParticipants';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class GroupService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.configuration.apiKeys['Authorization'] = localStorage.getItem('jwt-token');
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * To add a list of participants into a group.
   * This API adds a list of pariticipants to the existing group. Only admin can add the participants.
   * @param body Contact numbers of the participants to be added to the group
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupAddParticipantsPost(
    body: AddGroupParticipants,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public groupAddParticipantsPost(
    body: AddGroupParticipants,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public groupAddParticipantsPost(
    body: AddGroupParticipants,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public groupAddParticipantsPost(
    body: AddGroupParticipants,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling groupAddParticipantsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/group/add-participants`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To create a a group
   * This creates a group with given participants
   * @param body group information that needs to be stored in the catchup database.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupCreatePost(
    body: CreateGroup,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CreateGroupResponse>;
  public groupCreatePost(
    body: CreateGroup,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CreateGroupResponse>>;
  public groupCreatePost(
    body: CreateGroup,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CreateGroupResponse>>;
  public groupCreatePost(body: CreateGroup, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling groupCreatePost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<CreateGroupResponse>(`${this.basePath}/group/create`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To delete a group Id
   * This API deletes the group based on the group ID. Only admin can delete the group
   * @param group_id The group_id which has to be deleted.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupDeleteGroupIdDelete(
    group_id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20010>;
  public groupDeleteGroupIdDelete(
    group_id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20010>>;
  public groupDeleteGroupIdDelete(
    group_id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20010>>;
  public groupDeleteGroupIdDelete(
    group_id: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (group_id === null || group_id === undefined) {
      throw new Error('Required parameter group_id was null or undefined when calling groupDeleteGroupIdDelete.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<InlineResponse20010>(
      `${this.basePath}/group/delete/${encodeURIComponent(String(group_id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * To edit the basic information of already created group.
   * This API edits the basic information of a group like title. Only host can edit the details.
   * @param body Group information that need to be updated.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupEditPost(body: EditGroup, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse400>;
  public groupEditPost(
    body: EditGroup,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public groupEditPost(
    body: EditGroup,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public groupEditPost(body: EditGroup, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling groupEditPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/group/edit`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the group information
   * This API gives the complete group information created by the host
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupInfoGet(observe?: 'body', reportProgress?: boolean): Observable<GroupInfoResponse>;
  public groupInfoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupInfoResponse>>;
  public groupInfoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupInfoResponse>>;
  public groupInfoGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<GroupInfoResponse>(`${this.basePath}/group/info`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To remove participants from a group.
   * This API removes the participants from a group based on the list of contact numbers supplied. Only admin can remove the participants.
   * @param body contact numbers of the participants which has to be removed.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public groupRemoveParticipantsPost(
    body: RemoveGroupParticipants,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public groupRemoveParticipantsPost(
    body: RemoveGroupParticipants,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public groupRemoveParticipantsPost(
    body: RemoveGroupParticipants,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public groupRemoveParticipantsPost(
    body: RemoveGroupParticipants,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling groupRemoveParticipantsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/group/remove-participants`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
