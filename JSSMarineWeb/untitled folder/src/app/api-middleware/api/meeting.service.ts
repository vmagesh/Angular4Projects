/**
 * Catchup APIs
 * The Catchup API document is intended strictly for internal use only.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { AddParticipants } from '../model/addParticipants';
import { BacklogMeetingsRequest } from '../model/backlogMeetingsRequest';
import { CancelMeeting } from '../model/cancelMeeting';
import { CreateLink } from '../model/createLink';
import { CreateMeeting } from '../model/createMeeting';
import { DeleteMeeting } from '../model/deleteMeeting';
import { EditMeeting } from '../model/editMeeting';
import { GetLinkDetails } from '../model/getLinkDetails';
import { GetLinkDetailsResponse } from '../model/getLinkDetailsResponse';
import { GetParticipants } from '../model/getParticipants';
import { GetReferralMeeting } from '../model/getReferralMeeting';
import { GetReferralMeetingResponse } from '../model/getReferralMeetingResponse';
import { InlineResponse20011 } from '../model/inlineResponse20011';
import { InlineResponse20012 } from '../model/inlineResponse20012';
import { InlineResponse20013 } from '../model/inlineResponse20013';
import { InlineResponse20014 } from '../model/inlineResponse20014';
import { InlineResponse20015 } from '../model/inlineResponse20015';
import { InlineResponse400 } from '../model/inlineResponse400';
import { JoinMeeting } from '../model/joinMeeting';
import { MeetingInfo } from '../model/meetingInfo';
import { MeetingInfoResponse } from '../model/meetingInfoResponse';
import { RemoveParticipants } from '../model/removeParticipants';
import { StoreFirebaseLink } from '../model/storeFirebaseLink';
import { UndeliveredMeeting } from '../model/undeliveredMeeting';
import { UndeliveredMeetingResponse } from '../model/undeliveredMeetingResponse';
import { UpdateEventOptions } from '../model/updateEventOptions';
import { UpdateLinkStatus } from '../model/updateLinkStatus';
import { UpdateParticipantLimit } from '../model/updateParticipantLimit';
import { UpdateParticipantStatus } from '../model/updateParticipantStatus';
import { ValidateParticipantStatus } from '../model/validateParticipantStatus';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { GetMeetingListResponse } from '../model/getMeetingListResponse';
import { GetMeetingList } from '../model/getMeetingList';

@Injectable()
export class MeetingService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      //Remove later once the config object is passed dynamically.
      this.configuration.apiKeys['Authorization'] = localStorage.getItem('jwt-token');
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * To add a list of participants into a meeting.
   * This API adds a list of pariticipants to the existing meeting. Any participant can add the remaining participants if the allow_forwarding is enabled.
   * @param body meeting info into which the participants should be added.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingAddParticipantsPost(
    body: AddParticipants,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingAddParticipantsPost(
    body: AddParticipants,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingAddParticipantsPost(
    body: AddParticipants,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingAddParticipantsPost(
    body: AddParticipants,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingAddParticipantsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/add-participants`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the backlog meeting_ids based on recur_meeting_id
   * This API gets the meeting_ids based on recur_meeting_id
   * @param body recur_meeting_id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingBacklogIdsPost(
    body: BacklogMeetingsRequest,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20015>;
  public meetingBacklogIdsPost(
    body: BacklogMeetingsRequest,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20015>>;
  public meetingBacklogIdsPost(
    body: BacklogMeetingsRequest,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20015>>;
  public meetingBacklogIdsPost(
    body: BacklogMeetingsRequest,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingBacklogIdsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse20015>(`${this.basePath}/meeting/backlog/ids`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To create a recurrent/non-recurrent meeting
   * This API cancels the meeting based on the recur_meeting_id and meeting_id. Only host can cancel the meeting.
   * @param body The meeting info which has to be cancelled.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingCancelPost(
    body: CancelMeeting,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingCancelPost(
    body: CancelMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingCancelPost(
    body: CancelMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingCancelPost(
    body: CancelMeeting,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingCancelPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/cancel`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To create a meeting link
   * This API generates a random ID as a meeting link
   * @param body meeting info for which the link has to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingCreateLinkPost(
    body: CreateLink,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20014>;
  public meetingCreateLinkPost(
    body: CreateLink,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20014>>;
  public meetingCreateLinkPost(
    body: CreateLink,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20014>>;
  public meetingCreateLinkPost(
    body: CreateLink,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingCreateLinkPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse20014>(`${this.basePath}/meeting/create-link`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To create a recurrent/non-recurrent meeting
   * This creates a recurrent/non-recurrent meeting and add the participants based on the contact numbers. A chat message and push notification will be sent to all the participants.
   * @param body meeting information that needs to be stored in the catchup database.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingCreatePost(
    body: CreateMeeting,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingCreatePost(
    body: CreateMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingCreatePost(
    body: CreateMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingCreatePost(
    body: CreateMeeting,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingCreatePost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/create`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To delete a meeting from user&#x60;s screen.
   * This API deletes the meeting from the user&#x60;s screen. If the host deletes the meeting, the meeting will be cancelled and notification will be sent to all the participants.
   * @param body meeting info which has to be deleted
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingDeletePost(
    body: DeleteMeeting,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingDeletePost(
    body: DeleteMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingDeletePost(
    body: DeleteMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingDeletePost(
    body: DeleteMeeting,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingDeletePost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/delete`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To edit the basic information of already created meeting.
   * This API edits the basic information of a meeting like subject, time &amp; location. Only host can edit the details.
   * @param body Meeting information that need to be updated.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingEditPost(body: EditMeeting, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse400>;
  public meetingEditPost(
    body: EditMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingEditPost(
    body: EditMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingEditPost(body: EditMeeting, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingEditPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/edit`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the participants in a meeting.
   * This API fetches the list of participants in a meeting based on the recur_meeting_id and meeting_id
   * @param body meeting info to get the list of participants
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingGetParticipantsPost(
    body: GetParticipants,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20012>;
  public meetingGetParticipantsPost(
    body: GetParticipants,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20012>>;
  public meetingGetParticipantsPost(
    body: GetParticipants,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20012>>;
  public meetingGetParticipantsPost(
    body: GetParticipants,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingGetParticipantsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse20012>(`${this.basePath}/meeting/get-participants`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the list of meetings
   * This API fetches the list of meetings based on the given user_id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingIdGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20011>;
  public meetingIdGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20011>>;
  public meetingIdGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20011>>;
  public meetingIdGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<InlineResponse20011>(`${this.basePath}/meeting/id`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the meeting information
   * This API gives the complete meeting information and the participants inside the meeting based on the meeting_id or recur_meeting_id.
   * @param body Meeting Ids for which the information has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingInfoPost(
    body: MeetingInfo,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<MeetingInfoResponse>;
  public meetingInfoPost(
    body: MeetingInfo,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<MeetingInfoResponse>>;
  public meetingInfoPost(
    body: MeetingInfo,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<MeetingInfoResponse>>;
  public meetingInfoPost(body: MeetingInfo, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingInfoPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<MeetingInfoResponse>(`${this.basePath}/meeting/info`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To join a meeting
   * This API joins a participant into a meeting based on the given user_id and meeting_link.
   * @param body user object that needs to be shared to generate the token.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingJoinPost(body: JoinMeeting, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse400>;
  public meetingJoinPost(
    body: JoinMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingJoinPost(
    body: JoinMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingJoinPost(body: JoinMeeting, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingJoinPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/join`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To fetch the meeting link details
   * This API fetches the meeting details based on the given link
   * @param body link for which the meeting details has to be fetched
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingLinkDetailsPost(
    body: GetLinkDetails,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetLinkDetailsResponse>;
  public meetingLinkDetailsPost(
    body: GetLinkDetails,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetLinkDetailsResponse>>;
  public meetingLinkDetailsPost(
    body: GetLinkDetails,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetLinkDetailsResponse>>;
  public meetingLinkDetailsPost(
    body: GetLinkDetails,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingLinkDetailsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<GetLinkDetailsResponse>(`${this.basePath}/meeting/link-details`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the referral meetings based on meeting_id
   * This API gets the referral meetings based on meeting_id
   * @param body recur_meeting_id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingReferralPost(
    body: GetReferralMeeting,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetReferralMeetingResponse>;
  public meetingReferralPost(
    body: GetReferralMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetReferralMeetingResponse>>;
  public meetingReferralPost(
    body: GetReferralMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetReferralMeetingResponse>>;
  public meetingReferralPost(
    body: GetReferralMeeting,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingReferralPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<GetReferralMeetingResponse>(`${this.basePath}/meeting/referral`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To remove participants from a meeting.
   * This API removes the participants from a meeting based on the list of contact numbers supplied. Only host can remove the participants.
   * @param body meeting info from which the participants should be removed
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingRemoveParticipantsPost(
    body: RemoveParticipants,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingRemoveParticipantsPost(
    body: RemoveParticipants,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingRemoveParticipantsPost(
    body: RemoveParticipants,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingRemoveParticipantsPost(
    body: RemoveParticipants,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingRemoveParticipantsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/remove-participants`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To store the firebase link
   * This API stores the firebase link of the meeting
   * @param body firebase link for which meeting has to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingStoreFirebaseLinkPost(
    body: StoreFirebaseLink,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingStoreFirebaseLinkPost(
    body: StoreFirebaseLink,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingStoreFirebaseLinkPost(
    body: StoreFirebaseLink,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingStoreFirebaseLinkPost(
    body: StoreFirebaseLink,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingStoreFirebaseLinkPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/store-firebase-link`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the meeting information
   * This API gives the complete meeting information and the participants inside the meeting based on the meeting_id or recur_meeting_id.
   * @param body last sync timestamp
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingUndeliveredPost(
    body: UndeliveredMeeting,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UndeliveredMeetingResponse>;
  public meetingUndeliveredPost(
    body: UndeliveredMeeting,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UndeliveredMeetingResponse>>;
  public meetingUndeliveredPost(
    body: UndeliveredMeeting,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UndeliveredMeetingResponse>>;
  public meetingUndeliveredPost(
    body: UndeliveredMeeting,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingUndeliveredPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<UndeliveredMeetingResponse>(`${this.basePath}/meeting/undelivered`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To update the event settings
   * This API updates the event options like mute_notification, notification_disabled, allow_forwarding, etc.,
   * @param body Meeting info for which the changes have to reflected.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingUpdateEventOptionsPost(
    body: UpdateEventOptions,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingUpdateEventOptionsPost(
    body: UpdateEventOptions,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingUpdateEventOptionsPost(
    body: UpdateEventOptions,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingUpdateEventOptionsPost(
    body: UpdateEventOptions,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingUpdateEventOptionsPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/update-event-options`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To activate/deactivate a meeting link
   * This API activates/deactivates a meeting link
   * @param body link for which the meeting details has to be fetched
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingUpdateLinkStatusPost(
    body: UpdateLinkStatus,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingUpdateLinkStatusPost(
    body: UpdateLinkStatus,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingUpdateLinkStatusPost(
    body: UpdateLinkStatus,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingUpdateLinkStatusPost(
    body: UpdateLinkStatus,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingUpdateLinkStatusPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/update-link-status`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To activate/deactivate a meeting link
   * This API activates/deactivates a meeting link
   * @param body To increase or decrease the maximum number of participants in a meeting
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingUpdateParticipantLimitPost(
    body: UpdateParticipantLimit,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingUpdateParticipantLimitPost(
    body: UpdateParticipantLimit,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingUpdateParticipantLimitPost(
    body: UpdateParticipantLimit,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingUpdateParticipantLimitPost(
    body: UpdateParticipantLimit,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingUpdateParticipantLimitPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/update-participant-limit`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To get the meeting information
   * This API gives the meeting list between the given dates.
   * @param body last sync timestamp
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingListPost(
    body: GetMeetingList,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetMeetingListResponse>;
  public meetingListPost(
    body: GetMeetingList,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetMeetingListResponse>>;
  public meetingListPost(
    body: GetMeetingList,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetMeetingListResponse>>;
  public meetingListPost(
    body: GetMeetingList,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingListPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<GetMeetingListResponse>(`${this.basePath}/meeting/list`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To update the participant status of a meeting.
   * This API updates the participant statuc of a meeing. Typical status would be Read the meeting, Accepted the meeting, declined the meeting, etc.,
   * @param body The status and the meeting information in which the status of the participant has to be updated.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingUpdateParticipantStatusPost(
    body: UpdateParticipantStatus,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse400>;
  public meetingUpdateParticipantStatusPost(
    body: UpdateParticipantStatus,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse400>>;
  public meetingUpdateParticipantStatusPost(
    body: UpdateParticipantStatus,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse400>>;
  public meetingUpdateParticipantStatusPost(
    body: UpdateParticipantStatus,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling meetingUpdateParticipantStatusPost.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse400>(`${this.basePath}/meeting/update-participant-status`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * To validate the participant before adding them into the meeting
   * This API fetches the contact info if the contact is already added into the meeting and if the contact number is registered with Catch up.
   * @param body The meeting_ids and contact_numbers for which the status has to be fetched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public meetingValidateParticipantStatusPost(
    body: ValidateParticipantStatus,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse20013>;
  public meetingValidateParticipantStatusPost(
    body: ValidateParticipantStatus,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse20013>>;
  public meetingValidateParticipantStatusPost(
    body: ValidateParticipantStatus,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse20013>>;
  public meetingValidateParticipantStatusPost(
    body: ValidateParticipantStatus,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling meetingValidateParticipantStatusPost.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<InlineResponse20013>(`${this.basePath}/meeting/validate-participant-status`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
