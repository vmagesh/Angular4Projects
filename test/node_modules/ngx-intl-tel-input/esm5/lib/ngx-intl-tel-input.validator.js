/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as lpn from 'google-libphonenumber';
/** @type {?} */
export var phoneNumberValidator = (/**
 * @param {?} control
 * @return {?}
 */
function (control) {
    /** @type {?} */
    var id = control.value && control.value.id ? control.value.id : 'phone';
    /** @type {?} */
    var el = document.getElementById(id) ? document.getElementById(id) : undefined;
    if (el) {
        /** @type {?} */
        var isCheckValidation = el.getAttribute('validation');
        if (isCheckValidation === 'true') {
            /** @type {?} */
            var isRequired = control.errors && control.errors.required === true;
            /** @type {?} */
            var error = { validatePhoneNumber: { valid: false } };
            /** @type {?} */
            var number = void 0;
            try {
                number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);
            }
            catch (e) {
                if (isRequired === true) {
                    return error;
                }
            }
            if (control.value) {
                if (!number) {
                    return error;
                }
                else {
                    if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {
                        return error;
                    }
                }
            }
        }
        else if (isCheckValidation === 'false') {
            control.clearValidators();
        }
    }
    return;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWludGwtdGVsLWlucHV0LnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbnRsLXRlbC1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW50bC10ZWwtaW5wdXQudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEtBQUssR0FBRyxNQUFNLHVCQUF1QixDQUFDOztBQUU3QyxNQUFNLEtBQU8sb0JBQW9COzs7O0FBQUcsVUFBQyxPQUFvQjs7UUFDbEQsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPOztRQUNuRSxFQUFFLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUNoRixJQUFJLEVBQUUsRUFBRTs7WUFDRCxpQkFBaUIsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztRQUN2RCxJQUFJLGlCQUFpQixLQUFLLE1BQU0sRUFBRTs7Z0JBQzNCLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLElBQUk7O2dCQUMvRCxLQUFLLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTs7Z0JBQ25ELE1BQU0sU0FBaUI7WUFFM0IsSUFBSTtnQkFDSCxNQUFNLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNsRztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNYLElBQUksVUFBVSxLQUFLLElBQUksRUFBRTtvQkFBRSxPQUFPLEtBQUssQ0FBQztpQkFBRTthQUMxQztZQUVELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDbEIsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWixPQUFPLEtBQUssQ0FBQztpQkFDYjtxQkFBTTtvQkFDTixJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRTt3QkFDakcsT0FBTyxLQUFLLENBQUM7cUJBQ2I7aUJBQ0Q7YUFDRDtTQUNEO2FBQU0sSUFBSSxpQkFBaUIsS0FBSyxPQUFPLEVBQUU7WUFDekMsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzFCO0tBQ0Q7SUFDRCxPQUFPO0FBRVIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgKiBhcyBscG4gZnJvbSAnZ29vZ2xlLWxpYnBob25lbnVtYmVyJztcblxuZXhwb3J0IGNvbnN0IHBob25lTnVtYmVyVmFsaWRhdG9yID0gKGNvbnRyb2w6IEZvcm1Db250cm9sKSA9PiB7XG5cdGNvbnN0IGlkID0gY29udHJvbC52YWx1ZSAmJiBjb250cm9sLnZhbHVlLmlkID8gY29udHJvbC52YWx1ZS5pZCA6ICdwaG9uZSc7XG5cdGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIDogdW5kZWZpbmVkO1xuXHRpZiAoZWwpIHtcblx0XHRjb25zdCBpc0NoZWNrVmFsaWRhdGlvbiA9IGVsLmdldEF0dHJpYnV0ZSgndmFsaWRhdGlvbicpO1xuXHRcdGlmIChpc0NoZWNrVmFsaWRhdGlvbiA9PT0gJ3RydWUnKSB7XG5cdFx0XHRjb25zdCBpc1JlcXVpcmVkID0gY29udHJvbC5lcnJvcnMgJiYgY29udHJvbC5lcnJvcnMucmVxdWlyZWQgPT09IHRydWU7XG5cdFx0XHRjb25zdCBlcnJvciA9IHsgdmFsaWRhdGVQaG9uZU51bWJlcjogeyB2YWxpZDogZmFsc2UgfSB9O1xuXHRcdFx0bGV0IG51bWJlcjogbHBuLlBob25lTnVtYmVyO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRudW1iZXIgPSBscG4uUGhvbmVOdW1iZXJVdGlsLmdldEluc3RhbmNlKCkucGFyc2UoY29udHJvbC52YWx1ZS5udW1iZXIsIGNvbnRyb2wudmFsdWUuY291bnRyeUNvZGUpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRpZiAoaXNSZXF1aXJlZCA9PT0gdHJ1ZSkgeyByZXR1cm4gZXJyb3I7IH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbnRyb2wudmFsdWUpIHtcblx0XHRcdFx0aWYgKCFudW1iZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZXJyb3I7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKCFscG4uUGhvbmVOdW1iZXJVdGlsLmdldEluc3RhbmNlKCkuaXNWYWxpZE51bWJlckZvclJlZ2lvbihudW1iZXIsIGNvbnRyb2wudmFsdWUuY291bnRyeUNvZGUpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXJyb3I7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChpc0NoZWNrVmFsaWRhdGlvbiA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0Y29udHJvbC5jbGVhclZhbGlkYXRvcnMoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuO1xuXG59O1xuIl19