{"version":3,"sources":["ng://ng-bootstrap-datetime-angular/lib/ng-bootstrap-datetime-angular.service.ts","ng://ng-bootstrap-datetime-angular/lib/ng-bootstrap-datetime-angular.component.ts","ng://ng-bootstrap-datetime-angular/lib/ng-bootstrap-datetime-angular.module.ts"],"names":["NgBootstrapDatetimeAngularService","Injectable","args","providedIn","moment","moment_","NgBootstrapDatetimeAngularComponent","config","inj","this","inputDatetimeFormat","placeholder","hourStep","minuteStep","secondStep","seconds","disabled","onTouched","noop","onChange","autoClose","placement","prototype","ngOnInit","ngControl","get","NgControl","ngAfterViewInit","writeValue","newModel","myDate","toDate","dateStruct","year","getFullYear","month","getMonth","day","getDate","timeStruct","hour","getHours","minute","getMinutes","second","getSeconds","setDateStringModel","registerOnChange","fn","registerOnTouched","onInputChange","$event","onDateChange","event","onTimeChange","dateA","Date","date","inputBlur","Component","selector","template","providers","DatePipe","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgbPopoverConfig","Injector","Input","ViewChild","NgbDatepicker","NgbPopover","NgBootstrapDatetimeAngularModule","NgModule","declarations","imports","FormsModule","NgbModule","CommonModule","ReactiveFormsModule","exports"],"mappings":"gkBAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GC0BMC,EAASC,EACfC,EAAA,WA8CE,SAAAA,EAAoBC,EAAkCC,GAAlCC,KAAAF,OAAAA,EAAkCE,KAAAD,IAAAA,EA9BtDC,KAAAC,oBAAsB,mBAEtBD,KAAAE,YAAsB,GAEtBF,KAAAG,SAAW,EAEXH,KAAAI,WAAa,GAEbJ,KAAAK,WAAa,GAEbL,KAAAM,SAAU,EAGVN,KAAAO,UAAW,EAQHP,KAAAQ,UAAwBC,EAAAA,KACxBT,KAAAU,SAA6BD,EAAAA,KASnCX,EAAOa,UAAY,UACnBb,EAAOc,UAAY,OA6EvB,OA1EEf,EAAAgB,UAAAC,SAAA,WAEEd,KAAKe,UAAYf,KAAKD,IAAIiB,IAAIC,EAAAA,YAGhCpB,EAAAgB,UAAAK,gBAAA,aAGArB,EAAAgB,UAAAM,WAAA,SAAWC,GACT,GAAIA,EAAU,KACNC,EAAS1B,EAAOyB,GAAUE,SAEhCtB,KAAKuB,WAAa,CAChBC,KAAMH,EAAOI,cACbC,MAAOL,EAAOM,WAAa,EAC3BC,IAAKP,EAAOQ,WAGd7B,KAAK8B,WAAa,CAChBC,KAAMV,EAAOW,WACbC,OAAQZ,EAAOa,aACfC,OAAQd,EAAOe,cAGjBpC,KAAKqC,uBAITxC,EAAAgB,UAAAyB,iBAAA,SAAiBC,GACfvC,KAAKU,SAAW6B,GAGlB1C,EAAAgB,UAAA2B,kBAAA,SAAkBD,GAChBvC,KAAKQ,UAAY+B,GAGnB1C,EAAAgB,UAAA4B,cAAA,SAAcC,KAEd7C,EAAAgB,UAAA8B,aAAA,SAAaC,GACX5C,KAAKqC,sBAGPxC,EAAAgB,UAAAgC,aAAA,SAAaD,GACX5C,KAAKqC,sBAGPxC,EAAAgB,UAAAwB,mBAAA,WACE,IAAKrC,KAAK8B,WAAY,KACdgB,EAAQ,IAAIC,KAClB/C,KAAK8B,WAAa,CAChBC,KAAMe,EAAMd,WACZC,OAAQa,EAAMZ,aACdC,OAAQW,EAAMV,cAIdpC,KAAKuB,aACPvB,KAAKgD,KAAO,IAAID,KACd/C,KAAKuB,WAAWC,KAChBxB,KAAKuB,WAAWG,MAAQ,EACxB1B,KAAKuB,WAAWK,IAChB5B,KAAK8B,WAAWC,KAChB/B,KAAK8B,WAAWG,OAChBjC,KAAK8B,WAAWK,QAGlBnC,KAAKU,SAASV,KAAKgD,QAIvBnD,EAAAgB,UAAAoC,UAAA,SAAUP,GACR1C,KAAKQ,iCA1HR0C,EAAAA,UAASzD,KAAA,CAAC,CACT0D,SAAU,gCACVC,SAAA,suCAEAC,UAAW,CACTC,EAAAA,SACA,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAU,WAAO,OAAA7D,KAC9B8D,OAAO,iDAxBXC,EAAAA,wBALAC,EAAAA,yDAmCCC,EAAAA,2BAEAA,EAAAA,wBAEAA,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,uBAEAA,EAAAA,wBAGAA,EAAAA,kBAGAC,EAAAA,UAAStE,KAAA,CAACuE,EAAAA,cAAe,uBAGzBD,EAAAA,UAAStE,KAAA,CAACwE,EAAAA,WAAY,SA2FzBpE,EA7HA,GC3BA,IAAAqE,EAAA,WAMA,SAAAA,KAUgD,2BAV/CC,EAAAA,SAAQ1E,KAAA,CAAC,CACR2E,aAAc,CAACvE,GACfwE,QAAS,CACPC,EAAAA,YACAC,EAAAA,UACAC,EAAAA,aACAC,EAAAA,qBAEFC,QAAS,CAAC7E,OAEoCqE,EAhBhD","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgBootstrapDatetimeAngularService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  forwardRef,\n  ViewChild,\n  AfterViewInit,\n  Injector\n} from '@angular/core';\nimport {\n  NgbTimeStruct,\n  NgbDateStruct,\n  NgbPopoverConfig,\n  NgbPopover,\n  NgbDatepicker\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  NgControl\n} from '@angular/forms';\nimport { DatePipe } from '@angular/common';\nimport { noop } from 'rxjs';\nimport { IfStmt } from '@angular/compiler';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n@Component({\n  selector: 'ng-bootstrap-datetime-angular',\n  templateUrl: './ng-bootstrap-datetime-angular.component.html',\n  styles: [],\n  providers: [\n    DatePipe,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgBootstrapDatetimeAngularComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgBootstrapDatetimeAngularComponent  implements ControlValueAccessor, OnInit, AfterViewInit {\n \n  @Input()\n  inputDatetimeFormat = 'd/M/yyyy H:mm:ss';\n  @Input()\n  placeholder: string = \"\";\n  @Input()\n  hourStep = 1;\n  @Input()\n  minuteStep = 15;\n  @Input()\n  secondStep = 30;\n  @Input()\n  seconds = true;\n\n  @Input()\n  disabled = false;\n\n  @ViewChild(NgbDatepicker, null)\n  private dp: NgbDatepicker;\n\n  @ViewChild(NgbPopover, null)\n  private popover: NgbPopover;\n\n  private onTouched: () => void = noop;\n  private onChange: (_: any) => void = noop;\n\n  public ngControl: NgControl;\n\n  dateStruct: NgbDateStruct;\n  timeStruct: NgbTimeStruct;\n  date: Date;\n  \n  constructor(private config: NgbPopoverConfig, private inj: Injector) {\n    config.autoClose = 'outside';\n    config.placement = 'auto';\n  }\n\n  ngOnInit(): void {\n    // tslint:disable-next-line: deprecation\n    this.ngControl = this.inj.get(NgControl);\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  writeValue(newModel: string) {\n    if (newModel) {\n      const myDate = moment(newModel).toDate();\n\n      this.dateStruct = {\n        year: myDate.getFullYear(),\n        month: myDate.getMonth() + 1,\n        day: myDate.getDate()\n      };\n\n      this.timeStruct = {\n        hour: myDate.getHours(),\n        minute: myDate.getMinutes(),\n        second: myDate.getSeconds()\n      };\n\n      this.setDateStringModel();\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  onInputChange($event: any) {}\n\n  onDateChange(event: NgbDateStruct) {\n    this.setDateStringModel();\n  }\n\n  onTimeChange(event: NgbTimeStruct) {\n    this.setDateStringModel();\n  }\n\n  setDateStringModel() {\n    if (!this.timeStruct) {\n      const dateA = new Date();\n      this.timeStruct = {\n        hour: dateA.getHours(),\n        minute: dateA.getMinutes(),\n        second: dateA.getSeconds()\n      };\n    }\n\n    if (this.dateStruct) {\n      this.date = new Date(\n        this.dateStruct.year,\n        this.dateStruct.month - 1,\n        this.dateStruct.day,\n        this.timeStruct.hour,\n        this.timeStruct.minute,\n        this.timeStruct.second\n      );\n\n      this.onChange(this.date);\n    }\n  }\n\n  inputBlur($event) {\n    this.onTouched();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgBootstrapDatetimeAngularComponent } from './ng-bootstrap-datetime-angular.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [NgBootstrapDatetimeAngularComponent],\n  imports: [\n    FormsModule,\n    NgbModule,\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  exports: [NgBootstrapDatetimeAngularComponent]\n})\nexport class NgBootstrapDatetimeAngularModule { }\n"]}