import { Injectable, ɵɵdefineInjectable, Component, forwardRef, Injector, Input, ViewChild, NgModule } from '@angular/core';
import { NgbPopoverConfig, NgbDatepicker, NgbPopover, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { DatePipe, CommonModule } from '@angular/common';
import { noop } from 'rxjs';
import * as moment_ from 'moment';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-bootstrap-datetime-angular.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgBootstrapDatetimeAngularService = /** @class */ (function () {
    function NgBootstrapDatetimeAngularService() {
    }
    NgBootstrapDatetimeAngularService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgBootstrapDatetimeAngularService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgBootstrapDatetimeAngularService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgBootstrapDatetimeAngularService_Factory() { return new NgBootstrapDatetimeAngularService(); }, token: NgBootstrapDatetimeAngularService, providedIn: "root" });
    return NgBootstrapDatetimeAngularService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-bootstrap-datetime-angular.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = moment_;
var NgBootstrapDatetimeAngularComponent = /** @class */ (function () {
    function NgBootstrapDatetimeAngularComponent(config, inj) {
        this.config = config;
        this.inj = inj;
        this.inputDatetimeFormat = 'd/M/yyyy H:mm:ss';
        this.placeholder = "";
        this.hourStep = 1;
        this.minuteStep = 15;
        this.secondStep = 30;
        this.seconds = true;
        this.disabled = false;
        this.onTouched = noop;
        this.onChange = noop;
        config.autoClose = 'outside';
        config.placement = 'auto';
    }
    /**
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line: deprecation
        this.ngControl = this.inj.get(NgControl);
    };
    /**
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.writeValue = /**
     * @param {?} newModel
     * @return {?}
     */
    function (newModel) {
        if (newModel) {
            /** @type {?} */
            var myDate = moment(newModel).toDate();
            this.dateStruct = {
                year: myDate.getFullYear(),
                month: myDate.getMonth() + 1,
                day: myDate.getDate()
            };
            this.timeStruct = {
                hour: myDate.getHours(),
                minute: myDate.getMinutes(),
                second: myDate.getSeconds()
            };
            this.setDateStringModel();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.onInputChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) { };
    /**
     * @param {?} event
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateStringModel();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.onTimeChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateStringModel();
    };
    /**
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.setDateStringModel = /**
     * @return {?}
     */
    function () {
        if (!this.timeStruct) {
            /** @type {?} */
            var dateA = new Date();
            this.timeStruct = {
                hour: dateA.getHours(),
                minute: dateA.getMinutes(),
                second: dateA.getSeconds()
            };
        }
        if (this.dateStruct) {
            this.date = new Date(this.dateStruct.year, this.dateStruct.month - 1, this.dateStruct.day, this.timeStruct.hour, this.timeStruct.minute, this.timeStruct.second);
            this.onChange(this.date);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgBootstrapDatetimeAngularComponent.prototype.inputBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.onTouched();
    };
    NgBootstrapDatetimeAngularComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-bootstrap-datetime-angular',
                    template: "<div class=\"input-group mr-2\">\r\n  <input\r\n    [placeholder]=\"placeholder\"\r\n    [ngClass]=\"ngControl?.valid ? 'ng-valid' : 'ng-invalid'\"\r\n    class=\"form-control\"\r\n    (blur)=\"inputBlur($event)\"\r\n    [ngModel]=\"date | date: inputDatetimeFormat\"\r\n    (change)=\"onInputChange($event)\"\r\n    [disabled]=\"disabled\"\r\n  />\r\n\r\n  <div class=\"input-group-append\">\r\n    <button\r\n      class=\"btn btn-outline-secondary\"\r\n      [ngbPopover]=\"calendarContent\"\r\n      [disabled]=\"disabled\"\r\n      type=\"button\"\r\n    >\r\n      <i class=\"fa fa-calendar\"></i>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #calendarContent>\r\n  <div>\r\n    <div>\r\n      <ngb-datepicker\r\n        #dp\r\n        name=\"datepicker\"\r\n        [(ngModel)]=\"dateStruct\"\r\n        (ngModelChange)=\"onDateChange($event)\"\r\n      ></ngb-datepicker>\r\n      <ngb-timepicker\r\n        meridian=\"true\"\r\n        [seconds]=\"false\"\r\n        #tp\r\n        name=\"timepicker\"\r\n        [(ngModel)]=\"timeStruct\"\r\n        (ngModelChange)=\"onTimeChange($event)\"\r\n        [seconds]=\"seconds\"\r\n        [hourStep]=\"hourStep\"\r\n        [minuteStep]=\"minuteStep\"\r\n      ></ngb-timepicker>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                    providers: [
                        DatePipe,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgBootstrapDatetimeAngularComponent; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    NgBootstrapDatetimeAngularComponent.ctorParameters = function () { return [
        { type: NgbPopoverConfig },
        { type: Injector }
    ]; };
    NgBootstrapDatetimeAngularComponent.propDecorators = {
        inputDatetimeFormat: [{ type: Input }],
        placeholder: [{ type: Input }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        seconds: [{ type: Input }],
        disabled: [{ type: Input }],
        dp: [{ type: ViewChild, args: [NgbDatepicker, null,] }],
        popover: [{ type: ViewChild, args: [NgbPopover, null,] }]
    };
    return NgBootstrapDatetimeAngularComponent;
}());
if (false) {
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.inputDatetimeFormat;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.placeholder;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.hourStep;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.minuteStep;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.secondStep;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.seconds;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.dp;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.popover;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.onChange;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.ngControl;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.dateStruct;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.timeStruct;
    /** @type {?} */
    NgBootstrapDatetimeAngularComponent.prototype.date;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    NgBootstrapDatetimeAngularComponent.prototype.inj;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-bootstrap-datetime-angular.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgBootstrapDatetimeAngularModule = /** @class */ (function () {
    function NgBootstrapDatetimeAngularModule() {
    }
    NgBootstrapDatetimeAngularModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NgBootstrapDatetimeAngularComponent],
                    imports: [
                        FormsModule,
                        NgbModule,
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    exports: [NgBootstrapDatetimeAngularComponent]
                },] }
    ];
    return NgBootstrapDatetimeAngularModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ng-bootstrap-datetime-angular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgBootstrapDatetimeAngularComponent, NgBootstrapDatetimeAngularModule, NgBootstrapDatetimeAngularService };
//# sourceMappingURL=ng-bootstrap-datetime-angular.js.map
