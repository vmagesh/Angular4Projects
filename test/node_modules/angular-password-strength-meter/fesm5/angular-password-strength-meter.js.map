{"version":3,"file":"angular-password-strength-meter.js","sources":["ng://angular-password-strength-meter/lib/password-strength-meter.service.ts","ng://angular-password-strength-meter/lib/password-strength-meter.component.ts","ng://angular-password-strength-meter/lib/password-strength-meter.module.ts","ng://angular-password-strength-meter/public-api.ts","ng://angular-password-strength-meter/angular-password-strength-meter.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport * as zxcvbn_ from 'zxcvbn';\n\nconst zxcvbn = zxcvbn_;\n\n@Injectable()\nexport class PasswordStrengthMeterService {\n  constructor() {}\n\n  /**\n   *  this will return the password strength score in number\n   *  0 - too guessable\n   *  1 - very guessable\n   *  2 - somewhat guessable\n   *  3 - safely unguessable\n   *  4 - very unguessable\n   *\n   *  @param password - Password\n   */\n  score(password): number {\n    const result = zxcvbn(password);\n    return result.score;\n  }\n\n  /**\n   * this will return the password strength score with feedback messages\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\n   *\n   * @param password - Password\n   */\n  scoreWithFeedback(password): { score: number; feedback: { suggestions: string[]; warning: string } } {\n    const result = zxcvbn(password);\n    return { score: result.score, feedback: result.feedback };\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\n\n@Component({\n  selector: 'password-strength-meter',\n  templateUrl: './password-strength-meter.component.html',\n  styleUrls: ['./password-strength-meter.component.scss'],\n  providers: [PasswordStrengthMeterService]\n})\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\n  @Input() password: string;\n\n  @Input() minPasswordLength = 8;\n\n  @Input() enableFeedback = false;\n\n  @Input() colors: string[] = [];\n\n  @Output() strengthChange = new EventEmitter<number>();\n\n  passwordStrength: number = null;\n\n  feedback: { suggestions: string[]; warning: string } = null;\n\n  private prevPasswordStrength = null;\n\n  private defaultColours = [\n    'darkred',\n    'orangered',\n    'orange',\n    'yellowgreen',\n    'green'\n  ];\n\n  constructor(\n    private passwordStrengthMeterService: PasswordStrengthMeterService\n  ) {}\n\n  ngOnInit() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  private calculatePasswordStrength() {\n    // TODO validation logic optimization\n    if (!this.password) {\n      this.passwordStrength = null;\n    } else if (this.password && this.password.length < this.minPasswordLength) {\n      this.passwordStrength = 0;\n    } else {\n      if (this.enableFeedback) {\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\n          this.password\n        );\n        this.passwordStrength = result.score;\n        this.feedback = result.feedback;\n      } else {\n        this.passwordStrength = this.passwordStrengthMeterService.score(\n          this.password\n        );\n        this.feedback = null;\n      }\n    }\n\n    // Only emit the passwordStrength if it changed\n    if (this.prevPasswordStrength !== this.passwordStrength) {\n      this.strengthChange.emit(this.passwordStrength);\n      this.prevPasswordStrength = this.passwordStrength;\n    }\n  }\n\n  getMeterFillColor(strength) {\n    if (!strength || strength < 0 || strength > 5) {\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\n    }\n\n    return this.colors[strength]\n      ? this.colors[strength]\n      : this.defaultColours[strength];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PasswordStrengthMeterComponent],\n  exports: [PasswordStrengthMeterComponent]\n})\nexport class PasswordStrengthMeterModule {}\n","/*\n * Public API Surface of password-strength-meter\n */\n\nexport * from './lib/password-strength-meter.service';\nexport * from './lib/password-strength-meter.component';\nexport * from './lib/password-strength-meter.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}