import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PasswordStrengthMeterService } from './password-strength-meter.service';
var PasswordStrengthMeterComponent = /** @class */ (function () {
    function PasswordStrengthMeterComponent(passwordStrengthMeterService) {
        this.passwordStrengthMeterService = passwordStrengthMeterService;
        this.minPasswordLength = 8;
        this.enableFeedback = false;
        this.colors = [];
        this.strengthChange = new EventEmitter();
        this.passwordStrength = null;
        this.feedback = null;
        this.prevPasswordStrength = null;
        this.defaultColours = [
            'darkred',
            'orangered',
            'orange',
            'yellowgreen',
            'green'
        ];
    }
    PasswordStrengthMeterComponent.prototype.ngOnInit = function () { };
    PasswordStrengthMeterComponent.prototype.ngOnChanges = function (changes) {
        if (changes.password) {
            this.calculatePasswordStrength();
        }
    };
    PasswordStrengthMeterComponent.prototype.calculatePasswordStrength = function () {
        // TODO validation logic optimization
        if (!this.password) {
            this.passwordStrength = null;
        }
        else if (this.password && this.password.length < this.minPasswordLength) {
            this.passwordStrength = 0;
        }
        else {
            if (this.enableFeedback) {
                var result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                this.passwordStrength = result.score;
                this.feedback = result.feedback;
            }
            else {
                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                this.feedback = null;
            }
        }
        // Only emit the passwordStrength if it changed
        if (this.prevPasswordStrength !== this.passwordStrength) {
            this.strengthChange.emit(this.passwordStrength);
            this.prevPasswordStrength = this.passwordStrength;
        }
    };
    PasswordStrengthMeterComponent.prototype.getMeterFillColor = function (strength) {
        if (!strength || strength < 0 || strength > 5) {
            return this.colors[0] ? this.colors[0] : this.defaultColours[0];
        }
        return this.colors[strength]
            ? this.colors[strength]
            : this.defaultColours[strength];
    };
    PasswordStrengthMeterComponent.ctorParameters = function () { return [
        { type: PasswordStrengthMeterService }
    ]; };
    __decorate([
        Input()
    ], PasswordStrengthMeterComponent.prototype, "password", void 0);
    __decorate([
        Input()
    ], PasswordStrengthMeterComponent.prototype, "minPasswordLength", void 0);
    __decorate([
        Input()
    ], PasswordStrengthMeterComponent.prototype, "enableFeedback", void 0);
    __decorate([
        Input()
    ], PasswordStrengthMeterComponent.prototype, "colors", void 0);
    __decorate([
        Output()
    ], PasswordStrengthMeterComponent.prototype, "strengthChange", void 0);
    PasswordStrengthMeterComponent = __decorate([
        Component({
            selector: 'password-strength-meter',
            template: "<div>\n  <div class=\"strength-meter\">\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\n  </div>\n  <ng-container *ngIf=\"enableFeedback && feedback\">\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\n      {{feedback.warning}}\n    </small>\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\n    </small>\n  </ng-container>\n</div>\n",
            providers: [PasswordStrengthMeterService],
            styles: [".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:\"\";height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:calc(((100% - 20px)/ 5) + 10px);z-index:10}.strength-meter:before{left:calc((100% - 20px)/ 5)}.strength-meter:after{right:calc((100% - 20px)/ 5)}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}"]
        })
    ], PasswordStrengthMeterComponent);
    return PasswordStrengthMeterComponent;
}());
export { PasswordStrengthMeterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wYXNzd29yZC1zdHJlbmd0aC1tZXRlci8iLCJzb3VyY2VzIjpbImxpYi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUdMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFRakY7SUF5QkUsd0NBQ1UsNEJBQTBEO1FBQTFELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUF2QjNELHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUV0QixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBRXJCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV0RCxxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFFaEMsYUFBUSxHQUErQyxJQUFJLENBQUM7UUFFcEQseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBRTVCLG1CQUFjLEdBQUc7WUFDdkIsU0FBUztZQUNULFdBQVc7WUFDWCxRQUFRO1lBQ1IsYUFBYTtZQUNiLE9BQU87U0FDUixDQUFDO0lBSUMsQ0FBQztJQUVKLGlEQUFRLEdBQVIsY0FBWSxDQUFDO0lBRWIsb0RBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNwQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFTyxrRUFBeUIsR0FBakM7UUFDRSxxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztTQUM5QjthQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDekUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0wsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUN2QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsaUJBQWlCLENBQ2hFLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztnQkFDRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsS0FBSyxDQUM3RCxJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDdEI7U0FDRjtRQUVELCtDQUErQztRQUMvQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCwwREFBaUIsR0FBakIsVUFBa0IsUUFBUTtRQUN4QixJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDOztnQkEvQ3VDLDRCQUE0Qjs7SUF6QjNEO1FBQVIsS0FBSyxFQUFFO29FQUFrQjtJQUVqQjtRQUFSLEtBQUssRUFBRTs2RUFBdUI7SUFFdEI7UUFBUixLQUFLLEVBQUU7MEVBQXdCO0lBRXZCO1FBQVIsS0FBSyxFQUFFO2tFQUF1QjtJQUVyQjtRQUFULE1BQU0sRUFBRTswRUFBNkM7SUFUM0MsOEJBQThCO1FBTjFDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsZ25CQUF1RDtZQUV2RCxTQUFTLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7U0FDMUMsQ0FBQztPQUNXLDhCQUE4QixDQTBFMUM7SUFBRCxxQ0FBQztDQUFBLEFBMUVELElBMEVDO1NBMUVZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbUGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTdHJlbmd0aE1ldGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBwYXNzd29yZDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIG1pblBhc3N3b3JkTGVuZ3RoID0gODtcblxuICBASW5wdXQoKSBlbmFibGVGZWVkYmFjayA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGNvbG9yczogc3RyaW5nW10gPSBbXTtcblxuICBAT3V0cHV0KCkgc3RyZW5ndGhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICBwYXNzd29yZFN0cmVuZ3RoOiBudW1iZXIgPSBudWxsO1xuXG4gIGZlZWRiYWNrOiB7IHN1Z2dlc3Rpb25zOiBzdHJpbmdbXTsgd2FybmluZzogc3RyaW5nIH0gPSBudWxsO1xuXG4gIHByaXZhdGUgcHJldlBhc3N3b3JkU3RyZW5ndGggPSBudWxsO1xuXG4gIHByaXZhdGUgZGVmYXVsdENvbG91cnMgPSBbXG4gICAgJ2RhcmtyZWQnLFxuICAgICdvcmFuZ2VyZWQnLFxuICAgICdvcmFuZ2UnLFxuICAgICd5ZWxsb3dncmVlbicsXG4gICAgJ2dyZWVuJ1xuICBdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZTogUGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5wYXNzd29yZCkge1xuICAgICAgdGhpcy5jYWxjdWxhdGVQYXNzd29yZFN0cmVuZ3RoKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVQYXNzd29yZFN0cmVuZ3RoKCkge1xuICAgIC8vIFRPRE8gdmFsaWRhdGlvbiBsb2dpYyBvcHRpbWl6YXRpb25cbiAgICBpZiAoIXRoaXMucGFzc3dvcmQpIHtcbiAgICAgIHRoaXMucGFzc3dvcmRTdHJlbmd0aCA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhc3N3b3JkICYmIHRoaXMucGFzc3dvcmQubGVuZ3RoIDwgdGhpcy5taW5QYXNzd29yZExlbmd0aCkge1xuICAgICAgdGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuZW5hYmxlRmVlZGJhY2spIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlLnNjb3JlV2l0aEZlZWRiYWNrKFxuICAgICAgICAgIHRoaXMucGFzc3dvcmRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gcmVzdWx0LnNjb3JlO1xuICAgICAgICB0aGlzLmZlZWRiYWNrID0gcmVzdWx0LmZlZWRiYWNrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gdGhpcy5wYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlLnNjb3JlKFxuICAgICAgICAgIHRoaXMucGFzc3dvcmRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5mZWVkYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT25seSBlbWl0IHRoZSBwYXNzd29yZFN0cmVuZ3RoIGlmIGl0IGNoYW5nZWRcbiAgICBpZiAodGhpcy5wcmV2UGFzc3dvcmRTdHJlbmd0aCAhPT0gdGhpcy5wYXNzd29yZFN0cmVuZ3RoKSB7XG4gICAgICB0aGlzLnN0cmVuZ3RoQ2hhbmdlLmVtaXQodGhpcy5wYXNzd29yZFN0cmVuZ3RoKTtcbiAgICAgIHRoaXMucHJldlBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgZ2V0TWV0ZXJGaWxsQ29sb3Ioc3RyZW5ndGgpIHtcbiAgICBpZiAoIXN0cmVuZ3RoIHx8IHN0cmVuZ3RoIDwgMCB8fCBzdHJlbmd0aCA+IDUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbG9yc1swXSA/IHRoaXMuY29sb3JzWzBdIDogdGhpcy5kZWZhdWx0Q29sb3Vyc1swXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb2xvcnNbc3RyZW5ndGhdXG4gICAgICA/IHRoaXMuY29sb3JzW3N0cmVuZ3RoXVxuICAgICAgOiB0aGlzLmRlZmF1bHRDb2xvdXJzW3N0cmVuZ3RoXTtcbiAgfVxufVxuIl19