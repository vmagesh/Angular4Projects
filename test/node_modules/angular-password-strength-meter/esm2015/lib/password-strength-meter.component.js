import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PasswordStrengthMeterService } from './password-strength-meter.service';
let PasswordStrengthMeterComponent = class PasswordStrengthMeterComponent {
    constructor(passwordStrengthMeterService) {
        this.passwordStrengthMeterService = passwordStrengthMeterService;
        this.minPasswordLength = 8;
        this.enableFeedback = false;
        this.colors = [];
        this.strengthChange = new EventEmitter();
        this.passwordStrength = null;
        this.feedback = null;
        this.prevPasswordStrength = null;
        this.defaultColours = [
            'darkred',
            'orangered',
            'orange',
            'yellowgreen',
            'green'
        ];
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes.password) {
            this.calculatePasswordStrength();
        }
    }
    calculatePasswordStrength() {
        // TODO validation logic optimization
        if (!this.password) {
            this.passwordStrength = null;
        }
        else if (this.password && this.password.length < this.minPasswordLength) {
            this.passwordStrength = 0;
        }
        else {
            if (this.enableFeedback) {
                const result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                this.passwordStrength = result.score;
                this.feedback = result.feedback;
            }
            else {
                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                this.feedback = null;
            }
        }
        // Only emit the passwordStrength if it changed
        if (this.prevPasswordStrength !== this.passwordStrength) {
            this.strengthChange.emit(this.passwordStrength);
            this.prevPasswordStrength = this.passwordStrength;
        }
    }
    getMeterFillColor(strength) {
        if (!strength || strength < 0 || strength > 5) {
            return this.colors[0] ? this.colors[0] : this.defaultColours[0];
        }
        return this.colors[strength]
            ? this.colors[strength]
            : this.defaultColours[strength];
    }
};
PasswordStrengthMeterComponent.ctorParameters = () => [
    { type: PasswordStrengthMeterService }
];
__decorate([
    Input()
], PasswordStrengthMeterComponent.prototype, "password", void 0);
__decorate([
    Input()
], PasswordStrengthMeterComponent.prototype, "minPasswordLength", void 0);
__decorate([
    Input()
], PasswordStrengthMeterComponent.prototype, "enableFeedback", void 0);
__decorate([
    Input()
], PasswordStrengthMeterComponent.prototype, "colors", void 0);
__decorate([
    Output()
], PasswordStrengthMeterComponent.prototype, "strengthChange", void 0);
PasswordStrengthMeterComponent = __decorate([
    Component({
        selector: 'password-strength-meter',
        template: "<div>\n  <div class=\"strength-meter\">\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\n  </div>\n  <ng-container *ngIf=\"enableFeedback && feedback\">\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\n      {{feedback.warning}}\n    </small>\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\n    </small>\n  </ng-container>\n</div>\n",
        providers: [PasswordStrengthMeterService],
        styles: [".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:\"\";height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:calc(((100% - 20px)/ 5) + 10px);z-index:10}.strength-meter:before{left:calc((100% - 20px)/ 5)}.strength-meter:after{right:calc((100% - 20px)/ 5)}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}"]
    })
], PasswordStrengthMeterComponent);
export { PasswordStrengthMeterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wYXNzd29yZC1zdHJlbmd0aC1tZXRlci8iLCJzb3VyY2VzIjpbImxpYi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUdMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFRakYsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUF5QnpDLFlBQ1UsNEJBQTBEO1FBQTFELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUF2QjNELHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUV0QixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBRXJCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV0RCxxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFFaEMsYUFBUSxHQUErQyxJQUFJLENBQUM7UUFFcEQseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBRTVCLG1CQUFjLEdBQUc7WUFDdkIsU0FBUztZQUNULFdBQVc7WUFDWCxRQUFRO1lBQ1IsYUFBYTtZQUNiLE9BQU87U0FDUixDQUFDO0lBSUMsQ0FBQztJQUVKLFFBQVEsS0FBSSxDQUFDO0lBRWIsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNwQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFTyx5QkFBeUI7UUFDL0IscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLGlCQUFpQixDQUNoRSxJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQzthQUNqQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FDN0QsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO2dCQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2FBQ3RCO1NBQ0Y7UUFFRCwrQ0FBK0M7UUFDL0MsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsUUFBUTtRQUN4QixJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0YsQ0FBQTs7WUFoRHlDLDRCQUE0Qjs7QUF6QjNEO0lBQVIsS0FBSyxFQUFFO2dFQUFrQjtBQUVqQjtJQUFSLEtBQUssRUFBRTt5RUFBdUI7QUFFdEI7SUFBUixLQUFLLEVBQUU7c0VBQXdCO0FBRXZCO0lBQVIsS0FBSyxFQUFFOzhEQUF1QjtBQUVyQjtJQUFULE1BQU0sRUFBRTtzRUFBNkM7QUFUM0MsOEJBQThCO0lBTjFDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsZ25CQUF1RDtRQUV2RCxTQUFTLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7S0FDMUMsQ0FBQztHQUNXLDhCQUE4QixDQTBFMUM7U0ExRVksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtQYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQYXNzd29yZFN0cmVuZ3RoTWV0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHBhc3N3b3JkOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgbWluUGFzc3dvcmRMZW5ndGggPSA4O1xuXG4gIEBJbnB1dCgpIGVuYWJsZUZlZWRiYWNrID0gZmFsc2U7XG5cbiAgQElucHV0KCkgY29sb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIEBPdXRwdXQoKSBzdHJlbmd0aENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIHBhc3N3b3JkU3RyZW5ndGg6IG51bWJlciA9IG51bGw7XG5cbiAgZmVlZGJhY2s6IHsgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdOyB3YXJuaW5nOiBzdHJpbmcgfSA9IG51bGw7XG5cbiAgcHJpdmF0ZSBwcmV2UGFzc3dvcmRTdHJlbmd0aCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBkZWZhdWx0Q29sb3VycyA9IFtcbiAgICAnZGFya3JlZCcsXG4gICAgJ29yYW5nZXJlZCcsXG4gICAgJ29yYW5nZScsXG4gICAgJ3llbGxvd2dyZWVuJyxcbiAgICAnZ3JlZW4nXG4gIF07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlOiBQYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnBhc3N3b3JkKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKSB7XG4gICAgLy8gVE9ETyB2YWxpZGF0aW9uIGxvZ2ljIG9wdGltaXphdGlvblxuICAgIGlmICghdGhpcy5wYXNzd29yZCkge1xuICAgICAgdGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFzc3dvcmQgJiYgdGhpcy5wYXNzd29yZC5sZW5ndGggPCB0aGlzLm1pblBhc3N3b3JkTGVuZ3RoKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5lbmFibGVGZWVkYmFjaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmVXaXRoRmVlZGJhY2soXG4gICAgICAgICAgdGhpcy5wYXNzd29yZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSByZXN1bHQuc2NvcmU7XG4gICAgICAgIHRoaXMuZmVlZGJhY2sgPSByZXN1bHQuZmVlZGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmUoXG4gICAgICAgICAgdGhpcy5wYXNzd29yZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmZlZWRiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbmx5IGVtaXQgdGhlIHBhc3N3b3JkU3RyZW5ndGggaWYgaXQgY2hhbmdlZFxuICAgIGlmICh0aGlzLnByZXZQYXNzd29yZFN0cmVuZ3RoICE9PSB0aGlzLnBhc3N3b3JkU3RyZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RyZW5ndGhDaGFuZ2UuZW1pdCh0aGlzLnBhc3N3b3JkU3RyZW5ndGgpO1xuICAgICAgdGhpcy5wcmV2UGFzc3dvcmRTdHJlbmd0aCA9IHRoaXMucGFzc3dvcmRTdHJlbmd0aDtcbiAgICB9XG4gIH1cblxuICBnZXRNZXRlckZpbGxDb2xvcihzdHJlbmd0aCkge1xuICAgIGlmICghc3RyZW5ndGggfHwgc3RyZW5ndGggPCAwIHx8IHN0cmVuZ3RoID4gNSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29sb3JzWzBdID8gdGhpcy5jb2xvcnNbMF0gOiB0aGlzLmRlZmF1bHRDb2xvdXJzWzBdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbG9yc1tzdHJlbmd0aF1cbiAgICAgID8gdGhpcy5jb2xvcnNbc3RyZW5ndGhdXG4gICAgICA6IHRoaXMuZGVmYXVsdENvbG91cnNbc3RyZW5ndGhdO1xuICB9XG59XG4iXX0=